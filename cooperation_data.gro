include gro


chemostat(true);
set ( "chemostat_width", 300 );
set ( "chemostat_height", 300 );

// Initialize the simulation parameters
k1 := 5; // signal diffusion rate
k2 := 0.05; // signal degradation rate
k3 := 0.1; // signal emission rate
k4 := 0.02; // cell death rate
k5 := 0.02; // CcdB synthesis rate
k6 := 0.01; // CcdB degradation rate
k7 := 0.02; // CcdA synthesis rate
k8 := 0.01; // CcdA degradation rate

// Define two signal molecules
ahl_1 := signal( k1, k2 );
ahl_2 := signal( k1, k2 );

// Population 1 program 
program pop1() := {
	gfp := 0;
	cfp := 0;
	CcdB := 0; // The count number of CcdB, protein involved in apoptosis, is initialized.
	CcdA := 0; // The count number of CcdA
	
	true : {
		gfp := volume * 100; //green color
		
		emit_signal( ahl_1, k3 ); // signal is emitted at every dt interval
	}
	
	rate ( k5 * get_signal( ahl_1 ) ) : {
		CcdB := CcdB + 1; // CcdB synthesis
	};

	rate ( k7 * get_signal( ahl_2) ) : {
		CcdA := CcdA + 1; // CcdA synthesis
	};
	
	rate ( k6 * CcdB ) : { CcdB := CcdB - 1 }; // CcdB degradation
	rate ( k8 * CcdA ) : { CcdA := CcdA - 1 }; // CcdA degradation
	
	rate ( k4 * (CcdB - CcdA) ) : { die(); }; // cell death

};

// Population 2 program 
program pop2() := {
	gfp := 0;
	cfp := 0;
	CcdB := 0; // The count number of CcdB, protein involved in apoptosis, is initialized.
	CcdA := 0; // The count number of CcdA
	
	true : {
		cfp := volume * 100; //blue color
		
		emit_signal( ahl_2, k3 ); // signal is emitted at every dt interval
	}
	
	rate ( k5 * get_signal( ahl_2 ) ) : {
		CcdB := CcdB + 1; // CcdB synthesis
	};

	rate ( k7 * get_signal( ahl_1) ) : {
		CcdA := CcdA + 1; // CcdA synthesis
	};
	
	rate ( k6 * CcdB ) : { CcdB := CcdB - 1 }; // CcdB degradation
	rate ( k8 * CcdA ) : { CcdA := CcdA - 1 }; // CcdA degradation
	
	rate ( k4 * (CcdB - CcdA) ) : { die(); }; // cell death

};

//write data into file
f_gfp := fopen ( "./coop_results/gfp_data.csv", "w" );
f_cfp := fopen ( "./coop_results/cfp_data.csv", "w" );

//write header
fprint ( f_gfp, "time; n; mu_gfp; std_gfp; rawData_gfp \n" );
fprint ( f_cfp, "time; n; mu_cfp; std_cfp; rawData_cfp \n" );

fun statistics L .
	let n := length(L), mu := ( sumlist L ) / n in
	[
		num := n, //number of cells in simulation
		mean := mu, //mean value of reporter gene
		std := sqrt ( sumlist ( map ( \ x . (x-mu)^2 ) L ) / n )
	]
end;


//count gfp and cfp 
program main() := {

	t := 0;
	s := 0;
	L_gfp := {};
	L_cfp := {};
	stats_gfp := [ num := 0, mean := 0, std := 0 ];
	stats_cfp := [ num := 0, mean := 0, std := 0 ];

 	s >= 1 : {
		s := 0,
		L_gfp := maptocells gfp/volume end, 
		L_cfp := maptocells cfp/volume end,
		stats_gfp := statistics L_gfp ,
		stats_cfp := statistics L_cfp ,
		fprint ( f_gfp, t, "; ", stats_gfp.num, "; ", stats_gfp.mean, "; ", stats_gfp.std, "; ", L_gfp, "\n" ),
		fprint ( f_cfp, t, "; ", stats_cfp.num, "; ", stats_cfp.mean, "; ", stats_cfp.std, "; ", L_cfp, "\n" )
	}
	
	true : { 
	    t := t + dt,
	    s := s + dt
  }

};

//create cells


foreach q in range 100 do
	ecoli ( [
		y := -10 ], 
	program pop2() )	
end;
 
ecoli ( [ 
	y := 10 ], 
program pop1() )
	
	
	
